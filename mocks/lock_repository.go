// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// LockRepository is an autogenerated mock type for the LockRepository type
type LockRepository struct {
	mock.Mock
}

// ReleaseLock provides a mock function with given fields: ctx, key
func (_m *LockRepository) ReleaseLock(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseLock")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLock provides a mock function with given fields: ctx, key, ttl
func (_m *LockRepository) SetLock(ctx context.Context, key string, ttl time.Duration) (bool, error) {
	ret := _m.Called(ctx, key, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetLock")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (bool, error)); ok {
		return rf(ctx, key, ttl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) bool); ok {
		r0 = rf(ctx, key, ttl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, key, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLockRepository creates a new instance of LockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LockRepository {
	mock := &LockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
