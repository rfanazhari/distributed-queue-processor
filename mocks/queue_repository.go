// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rfanazhari/distributed-queue-processor/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// QueueRepository is an autogenerated mock type for the QueueRepository type
type QueueRepository struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *QueueRepository) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsumeReportJobs provides a mock function with given fields: ctx, callback
func (_m *QueueRepository) ConsumeReportJobs(ctx context.Context, callback func(entity.ReportJob) error) error {
	ret := _m.Called(ctx, callback)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeReportJobs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(entity.ReportJob) error) error); ok {
		r0 = rf(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishReportJob provides a mock function with given fields: ctx, job
func (_m *QueueRepository) PublishReportJob(ctx context.Context, job entity.ReportJob) error {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for PublishReportJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ReportJob) error); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueueRepository creates a new instance of QueueRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueRepository {
	mock := &QueueRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
